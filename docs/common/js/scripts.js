import vertexShader from"../shaders/vertex.js";import fragmentShader from"../shaders/fragment.js";class ScrollStage{constructor(){this.element=document.querySelector(".content"),this.viewport={width:window.innerWidth,height:window.innerHeight},this.mouse={x:0,y:0},this.scroll={height:0,limit:0,hard:0,soft:0,ease:.05,normalized:0,running:!1},this.settings={uFrequency:{start:0,end:4},uAmplitude:{start:4,end:4},uDensity:{start:1,end:1},uStrength:{start:0,end:1.1},uDeepPurple:{start:1,end:0},uOpacity:{start:.33,end:.66}},this.scene=new THREE.Scene,this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),this.canvas=this.renderer.domElement,this.camera=new THREE.PerspectiveCamera(75,this.viewport.width/this.viewport.height,.1,10),this.clock=new THREE.Clock,this.smoothScroll=new SmoothScroll({element:this.element,viewport:this.viewport,scroll:this.scroll}),gsap.defaults({ease:"power2",duration:6.6,overwrite:!0}),this.updateScrollAnimations=this.updateScrollAnimations.bind(this),this.update=this.update.bind(this),this.init()}init(){this.addCanvas(),this.addCamera(),this.addMesh(),this.addEventListeners(),this.onResize(),this.update()}addCanvas(){this.canvas.classList.add("webgl"),document.body.appendChild(this.canvas)}addCamera(){this.camera.position.set(0,0,2.5),this.scene.add(this.camera)}addMesh(){this.geometry=new THREE.IcosahedronGeometry(1,64),this.material=new THREE.ShaderMaterial({wireframe:!0,blending:THREE.AdditiveBlending,transparent:!0,vertexShader:vertexShader,fragmentShader:fragmentShader,uniforms:{uFrequency:{value:this.settings.uFrequency.start},uAmplitude:{value:this.settings.uAmplitude.start},uDensity:{value:this.settings.uDensity.start},uStrength:{value:this.settings.uStrength.start},uDeepPurple:{value:this.settings.uDeepPurple.start},uOpacity:{value:this.settings.uOpacity.start}}}),this.mesh=new THREE.Mesh(this.geometry,this.material),this.scene.add(this.mesh)}addEventListeners(){window.addEventListener("scroll",this.onScroll.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}onMouseMove(t){this.mouse.x=4*(t.clientX/this.viewport.width).toFixed(2),this.mouse.y=2*(t.clientY/this.viewport.height).toFixed(2),gsap.to(this.mesh.material.uniforms.uFrequency,{value:this.mouse.x}),gsap.to(this.mesh.material.uniforms.uAmplitude,{value:this.mouse.x}),gsap.to(this.mesh.material.uniforms.uDensity,{value:this.mouse.y}),gsap.to(this.mesh.material.uniforms.uStrength,{value:this.mouse.y})}onScroll(){this.scroll.running||(window.requestAnimationFrame(this.updateScrollAnimations),this.scroll.running=!0)}onResize(){this.viewport={width:window.innerWidth,height:window.innerHeight},this.viewport.width<this.viewport.height?this.mesh.scale.set(.75,.75,.75):this.mesh.scale.set(1,1,1),this.smoothScroll.onResize(),this.camera.aspect=this.viewport.width/this.viewport.height,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.viewport.width,this.viewport.height),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,1.5))}updateScrollAnimations(){for(var t in this.scroll.running=!1,this.scroll.normalized=(this.scroll.hard/this.scroll.limit).toFixed(1),gsap.to(this.mesh.rotation,{x:this.scroll.normalized*Math.PI}),this.settings)this.settings[t].start!==this.settings[t].end&&gsap.to(this.mesh.material.uniforms[t],{value:this.settings[t].start+this.scroll.normalized*(this.settings[t].end-this.settings[t].start)})}update(){var t=this.clock.getElapsedTime();this.mesh.rotation.y=.05*t,this.render(),this.smoothScroll.update(),window.requestAnimationFrame(this.update)}render(){this.renderer.render(this.scene,this.camera)}}class SmoothScroll{constructor({element:t,viewport:e,scroll:s}){this.element=t,this.viewport=e,this.scroll=s,this.elements={scrollContnet:this.element.querySelector(".scroll__content")}}setSizes(){this.scroll.height=this.elements.scrollContnet.getBoundingClientRect().height,this.scroll.limit=this.elements.scrollContnet.clientHeight-this.viewport.height,document.body.style.height=this.scroll.height+"px"}update(){this.scroll.hard=window.scrollY,this.scroll.hard=gsap.utils.clamp(0,this.scroll.limit,this.scroll.hard),this.scroll.soft=gsap.utils.interpolate(this.scroll.soft,this.scroll.hard,this.scroll.ease),this.scroll.soft<.01&&(this.scroll.soft=0),this.elements.scrollContnet.style.transform=`translateY(${-this.scroll.soft}px)`}onResize(){this.viewport={width:window.innerWidth,height:window.innerHeight},this.setSizes()}}window.addEventListener("DOMContentLoaded",()=>{new ScrollStage});